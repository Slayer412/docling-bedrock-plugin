"""Provides the PictureDescriptionBedrockApiModel for generating image descriptions using AWS Bedrock.

This module integrates the AWS Bedrock multimodal models (like Claude 3 Sonnet/Haiku)
into the Docling framework for automated image description tasks.
"""
from collections.abc import Iterable
from pathlib import Path
import base64
from io import BytesIO
import json
import logging
from typing import Optional, Type, Union, List
from concurrent.futures import ThreadPoolExecutor

import boto3
from PIL import Image

from docling.datamodel.pipeline_options import AcceleratorOptions
from docling.exceptions import OperationNotAllowed
from docling.models.picture_description_base_model import PictureDescriptionBaseModel
from docling_bedrock_plugin.pipeline_options import PictureDescriptionBedrockApiOptions

_log = logging.getLogger(__name__)


class PictureDescriptionBedrockApiModel(PictureDescriptionBaseModel):
    """Generates picture descriptions using AWS Bedrock multimodal models.

    Connects to AWS Bedrock Runtime, formats requests for supported models
    (currently Anthropic Claude 3), sends image data, and processes the
    textual description returned by the model.

    Handles image encoding, API request construction, response parsing,
    and concurrent processing of multiple images using a thread pool.

    Attributes:
        options (PictureDescriptionBedrockApiOptions): Configuration specific to Bedrock API calls.
        bedrock_client (boto3.client): The initialized Bedrock Runtime client.
        provenance (str): Identifier for the description source ('amazon-bedrock').
    """
    @classmethod
    def get_options_type(cls) -> Type:
        """Returns the specific options class type for this model."""
        return PictureDescriptionBedrockApiOptions

    def __init__(
        self,
        enabled: bool,
        enable_remote_services: bool,
        artifacts_path: Optional[Union[Path, str]],
        options: PictureDescriptionBedrockApiOptions,
        accelerator_options: AcceleratorOptions,
    ):
        """Initializes the Bedrock API model.

        Sets up the Bedrock client connection based on provided options.
        Validates if remote services are enabled.

        Args:
            enabled: Whether this model step is active.
            enable_remote_services: Flag allowing connections to external services.
            artifacts_path: Path for storing artifacts (not directly used here).
            options: Configuration specific to the Bedrock API calls.
            accelerator_options: Options related to hardware acceleration.

        Raises:
            OperationNotAllowed: If the model is enabled but remote services are not.
        """
        super().__init__(
            enabled=enabled,
            enable_remote_services=enable_remote_services,
            artifacts_path=artifacts_path,
            options=options,
            accelerator_options=accelerator_options,
        )
        self.options: PictureDescriptionBedrockApiOptions
        self.provenance = "amazon-bedrock"

        if self.enabled:
            if not enable_remote_services:
                raise OperationNotAllowed(
                    "Connections to remote services is only allowed when set explicitly. "
                    "pipeline_options.enable_remote_services=True."
                )

            session_kwargs = {}
            if self.options.profile_name:
                session_kwargs["profile_name"] = self.options.profile_name

            session = boto3.Session(**session_kwargs)
            client_kwargs = {}
            if self.options.region_name:
                client_kwargs["region_name"] = self.options.region_name

            self.bedrock_client = session.client(
                service_name="bedrock-runtime", **client_kwargs
            )

    def _call_bedrock_for_image(self, image: Image.Image) -> str:
        """Sends a single image to Bedrock for description.

        Handles image format conversion (JPEG/PNG), base64 encoding,
        constructing the model-specific request body (currently for Claude 3),
        invoking the model via the Bedrock client, and parsing the response.

        Args:
            image: The PIL Image object to describe.

        Returns:
            The textual description generated by the Bedrock model, or an
            error message if processing fails.
        """
        try:
            img_buffer = BytesIO()
            try:
                image.save(img_buffer, format="JPEG")
                image_format = "jpeg"
            except OSError:
                _log.warning("Could not save as JPEG, falling back to PNG.")
                img_buffer = BytesIO()
                image.save(img_buffer, format="PNG")
                image_format = "png"

            image_base64 = base64.b64encode(img_buffer.getvalue()).decode("utf-8")

            if self.options.model_id.startswith("anthropic.claude-3"):
                request_body = {
                    "anthropic_version": "bedrock-2023-05-31",
                    "max_tokens": self.options.max_tokens,
                    "temperature": self.options.temperature,
                    "messages": [
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "image",
                                    "source": {
                                        "type": "base64",
                                        "media_type": f"image/{image_format}",
                                        "data": image_base64,
                                    },
                                },
                                {"type": "text", "text": self.options.prompt},
                            ],
                        }
                    ],
                }
                if hasattr(self.options, "top_k") and self.options.top_k:
                    request_body["top_k"] = self.options.top_k
            else:
                _log.warning(
                    f"Unsupported model in _call_bedrock_for_image: {self.options.model_id}"
                )
                return f"Unsupported model: {self.options.model_id}"

            request_body_bytes = json.dumps(request_body).encode("utf-8")

            response = self.bedrock_client.invoke_model(
                modelId=self.options.model_id,
                body=request_body_bytes,
                contentType="application/json",
                accept="application/json",
            )

            response_body = json.loads(response.get("body").read())

            if self.options.model_id.startswith("anthropic.claude-3"):
                result = ""
                if "content" in response_body:
                    for content_item in response_body.get("content", []):
                        if content_item.get("type") == "text":
                            result += content_item.get("text", "")
                    return result.strip()
                else:
                    _log.warning(
                        f"Unexpected response format from Bedrock: {response_body}"
                    )
                    return "Error processing image: Unexpected response format"
            else:
                return str(response_body).strip()

        except Exception as e:
            _log.error(
                f"Error processing single image with Bedrock: {str(e)}", exc_info=True
            )
            return f"Error processing image: {str(e)}"

    def _annotate_images(self, images: List[Image.Image]) -> Iterable[str]:
        """Annotates a list of images concurrently using Bedrock.

        Uses a ThreadPoolExecutor to parallelize calls to `_call_bedrock_for_image`
        for each image in the input list.

        Args:
            images: A list of PIL Image objects.

        Returns:
            An iterable (typically a list) of string descriptions corresponding
            to the input images, including error messages for failed images.
        """
        results = []
        with ThreadPoolExecutor(max_workers=self.options.max_workers) as executor:
            results_iterator = executor.map(self._call_bedrock_for_image, images)
            try:
                results = list(results_iterator)
            except Exception as e:
                _log.error(
                    f"Error occurred during threaded execution: {e}", exc_info=True
                )
                num_processed = len(results)
                results.extend(
                    [f"Error processing image: Thread pool failed ({e})"]
                    * (len(images) - num_processed)
                )

        return results
